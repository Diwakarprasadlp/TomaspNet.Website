<rss version="2.0">
  <channel>
    <title>Tomas Petricek's blog</title>
    <link>http://tomasp.net</link>
    <description>Writing about software development in F# and .NET, sharing materials from my F# trainings and talks, writing about programming language research and theory.</description>
    <item>
      <title>Evaluating expressions using pattern matching in C# 6</title>
      <guid>http://tomasp.net/blog/2015/csharp-pattern-matching</guid>
      <link>http://tomasp.net/blog/2015/csharp-pattern-matching/index.html</link>
      <pubDate>Wed, 01 Apr 2015 10:41:49 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/csharp-pattern-matching/hat.png" style="float:right;margin:20px" /&gt;

&lt;p&gt;On year ago, on this very day, &lt;a href="http://tomasp.net/blog/2014/csharp-6-released/index.html"&gt;I wrote about the open-sourcing of C# 
6.0&lt;/a&gt;. Thanks to a very special
information leak, I learned about this about a week before Microsoft officially announced
it. However, my information were slightly incorrect - rather then releasing the &lt;a href="https://github.com/Microsoft/visualfsharp/"&gt;much 
improved version of the language&lt;/a&gt;, Microsoft
continued working on language version internally called "Small C#", which is now available
as "C# 6" in the &lt;a href="https://www.visualstudio.com/en-us/news/vs2015-vs.aspx"&gt;Visual Studio 2015 preview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is my understanding that, with this release, Microsoft is secretly testing the reaction of the 
developer audience to some of the amazing features that F# developers loved and used for 
the last 7 years and that are coming to C# &lt;em&gt;very soon&lt;/em&gt;. To avoid shock, these are however
carefuly hidden!&lt;/p&gt;

&lt;p&gt;In this blog post, I'm going to show you &lt;em&gt;pattern matching&lt;/em&gt; which is probably the most useful
hidden C# feature and its improvements in C# 6. For reasons that elude me, pattern matching in 
C# 6 is called &lt;em&gt;exception filters&lt;/em&gt; and has some unfortunate restrictions. But we can still 
use it to write nice functional code!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Upcoming F# book and event deals</title>
      <guid>http://tomasp.net/blog/2015/books-trainings</guid>
      <link>http://tomasp.net/blog/2015/books-trainings/index.html</link>
      <pubDate>Fri, 27 Mar 2015 11:16:27 GMT</pubDate>
      <description>&lt;a href="http://www.functional-programming.net"&gt;
&lt;img src="http://tomasp.net/blog/2015/books-trainings/snip.png" style="width:150px;float:right;margin:0px 0px 15px 15px" /&gt;
&lt;/a&gt;

&lt;p&gt;Since I &lt;a href="https://twitter.com/tomaspetricek/status/544531884030840832"&gt;submitted my PhD thesis in December&lt;/a&gt;,
I had a little bit of time to finish some of the things that I wanted to do for a really long time, but
never quite found time to actually do them. This included &lt;a href="http://bluemountaincapital.github.io/FSharpRProvider/mac-and-linux.html"&gt;getting the R provider to work on 
Mac&lt;/a&gt; and also creating a new 
web site for my various functional programming trainings and books. I even have a nice domain name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://www.functional-programming.net"&gt;www.functional-programming.net&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The page also discusses a couple of business reasons for looking into functional programming. So, if you're
a business person wondering why you should send your developers on an F# course, the site has the answers
for you too! (Or if you are developer and need a page for your boss.) The other place to check out is the
official &lt;a href="http://www.fsharp.org"&gt;F# Software Foundation web page&lt;/a&gt; is another great resource and the
&lt;a href="http://fsharp.org/testimonials/"&gt;testimonials hosted there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The page has some information about the &lt;a href="http://functional-programming.net/#trainings"&gt;various trainings we're offering at fsharpWorks&lt;/a&gt;
and about the two F# books I co-authored (&lt;a href="http://functional-programming.net/rwfp/"&gt;Real-World Functional Programming&lt;/a&gt; and 
brand new &lt;a href="http://functional-programming.net/deepdives/"&gt;F# Deep Dives&lt;/a&gt;). 
I'm happy that we can offer some special deals on both the books and the F# FastTrack course in London, 
so if you're considering getting into F#, now is a good time!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Library patterns: Why frameworks are evil</title>
      <guid>http://tomasp.net/blog/2015/library-frameworks</guid>
      <link>http://tomasp.net/blog/2015/library-frameworks/index.html</link>
      <pubDate>Tue, 03 Mar 2015 16:13:48 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/library-frameworks/diagram-narrow.png" style="float:right;margin:25px 0px 25px 20px" /&gt;

&lt;p&gt;This article is a follow up to my previous blog post about &lt;a href="http://tomasp.net/blog/2015/library-layers"&gt;functional library 
design&lt;/a&gt;, but you do not need to read the previous one,
because I'll focus on a different topic.&lt;/p&gt;

&lt;p&gt;In the previous article, I wrote about a couple of principles that I find useful when 
designing libraries in a functional style. This follows from my experience with building
F# libraries, but the ideas are quite general and can be useful in any programming language.
Previously, I wrote how &lt;em&gt;multiple layers of abstraction&lt;/em&gt; let you build libraries that make
80% of scenarios easy while still supporting the more interesting use cases.&lt;/p&gt;

&lt;p&gt;In this article, I'll focus on two other points from the list - how to design &lt;em&gt;composable&lt;/em&gt;
libraries and how (and why) to &lt;em&gt;avoid callbacks&lt;/em&gt; in library design. As the title suggests, this
boils down to one thing - build &lt;strong&gt;libraries&lt;/strong&gt; rather than &lt;strong&gt;frameworks&lt;/strong&gt;!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Library patterns: Multiple levels of abstraction</title>
      <guid>http://tomasp.net/blog/2015/library-layers</guid>
      <link>http://tomasp.net/blog/2015/library-layers/index.html</link>
      <pubDate>Tue, 03 Feb 2015 15:54:30 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/library-layers/layers.png" style="float:right;margin:15px 0px 15px 10px" /&gt;

&lt;p&gt;Over the last few years, I created or contributed to a number of libraries including 
&lt;a href="https://github.com/fsharp/FSharp.Data"&gt;F# Data&lt;/a&gt; for data access,
&lt;a href="http://bluemountaincapital.github.io/Deedle/"&gt;Deedle&lt;/a&gt; for exploratory data science with C# and F#,
Markdown parser and code-formatter &lt;a href="http://tpetricek.github.io/FSharp.Formatting/"&gt;F# Formatting&lt;/a&gt;
and other fun libraries such as one for composing 3D objects &lt;a href="http://tomasp.net/blog/2014/composing-christmas/"&gt;used in my Christmas blog 
post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Building libraries is a fun and challenging task - even if we ignore all the additional things
that you need to get right such as testing, documentation and building (see &lt;a href="http://tomasp.net/blog/2013/great-open-source/"&gt;my earlier blog
post&lt;/a&gt;) and focus just on the API design.
In this blog post (or perhaps a series), I'll share some of the things I learned when trying 
to answer the question: What should a good library look like?&lt;/p&gt;

&lt;p&gt;I was recently watching Mark Seemann's course &lt;a href="http://blog.ploeh.dk/2014/01/22/a-functional-architecture-with-f/"&gt;A Functional architecture with F#&lt;/a&gt;,
which is a great material on designing functional &lt;em&gt;applications&lt;/em&gt;. But I also realised that not much
has been written on designing functional &lt;em&gt;libraries&lt;/em&gt;. For some aspect, you can use functional patterns
like monads (see &lt;a href="https://skillsmatter.com/skillscasts/6120-functional-programming-design-patterns-with-scott-wlaschin"&gt;Scott Wlaschin's presentation&lt;/a&gt;),
but this only answers a part of the question - it tells you how to design individual types, but
not an entire library...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>FnuPlot: Cross-platform charting with gnuplot</title>
      <guid>http://tomasp.net/blog/2015/fnuplot</guid>
      <link>http://tomasp.net/blog/2015/fnuplot/index.html</link>
      <pubDate>Thu, 15 Jan 2015 16:58:17 GMT</pubDate>
      <description>&lt;img src="http://fsprojects.github.io/FnuPlot/img/logo.png" style="width:120px;float:right;margin:10px" /&gt;

&lt;p&gt;There is a bunch of visualization and charting libraries for F#. Sadly, perhaps the most
advanced one, &lt;a href="http://fsharp.github.io/FSharp.Charting/"&gt;F# Charting&lt;/a&gt;, does not work 
particularly well outside of Windows at the moment. There are also some work-in-progress
libraries based on HTML like &lt;a href="http://fsprojects.github.io/Foogle.Charts/"&gt;Foogle Charts&lt;/a&gt; and
&lt;a href="http://tahahachana.github.io/FsPlot/"&gt;FsPlot&lt;/a&gt;, which are cross-platform, but not quite
ready yet.&lt;/p&gt;

&lt;p&gt;Before Christmas, I got a &lt;a href="https://github.com/fsprojects/FnuPlot/pull/2"&gt;notification from GitHub&lt;/a&gt;
about a pull request for a simple gnuplot wrapper that I wrote a long time ago (and which used
to be carefully hidden &lt;a href="http://fsxplat.codeplex.com"&gt;on CodePlex&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The library is incomplete and I don't expect to dedicate too much time to maintaining it,
but it works quite nicely for basic charts and so I though I'd add the 
&lt;a href="http://fsprojects.github.io/ProjectScaffold/"&gt;ProjectScaffold&lt;/a&gt; structure, do a few tweaks
and make it available as a modern F# project.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why you should learn F# in 2015 (and how)?</title>
      <guid>http://tomasp.net/blog/2015/why-fsharp-in-2015</guid>
      <link>http://tomasp.net/blog/2015/why-fsharp-in-2015/index.html</link>
      <pubDate>Wed, 07 Jan 2015 13:36:04 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/why-fsharp-in-2015/gingerbread.jpg" style="width:200px;float:right;margin:15px" /&gt;

&lt;p&gt;I guess that it might be a bit too late for adding to your list of new year's resolution now.
But just if you still have an empty slot (or in case an originally taken slot has become
available), your new year's resolution should be to get involved with F#!&lt;/p&gt;

&lt;p&gt;Obviously, the goal of this blog post is to sell you some of my F# trainings and other materials -
including the online course on &lt;a href="http://fsharpworks.com/workshops/finance.html"&gt;F# in Finance&lt;/a&gt; and our
&lt;a href="http://fsharpworks.com/workshops/fast-track.html"&gt;FastTrack to F#&lt;/a&gt; course in London and New York
and also the &lt;a href="http://manning.com/petricek2"&gt;F# Deep Dives&lt;/a&gt; book. But to conceal this fact, I'm
going to fill most of the blog post with useful information about F#, the F# Software Foundation
and the F# community (but if you really just want to read about my courses, scroll down to the
&lt;a href="http://tomasp.net/blog/2015/why-fsharp-in-2015/index.html#courses"&gt;second section&lt;/a&gt;).&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Composing Christmas with F#</title>
      <guid>http://tomasp.net/blog/2014/composing-christmas</guid>
      <link>http://tomasp.net/blog/2014/composing-christmas/index.html</link>
      <pubDate>Mon, 08 Dec 2014 17:22:28 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2014/composing-christmas/glowing.gif" style="float:right;margin:20px; width:200px" /&gt; 

&lt;p&gt;This blog post is a part of the awesome &lt;a href="https://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/"&gt;F# Advent Calendar&lt;/a&gt;
(see the previous entry about &lt;a href="http://richardminerich.com/2014/12/developing-an-algorithm-in-f-fast-rotational-alignments-with-gospers-hack/"&gt;writing algorithms in F#&lt;/a&gt;
from Rick Minerich), so it inevitably needs a Christmassy theme. However, there is also 
going to be a serious theme for the blog post, which is domain-specific languages.&lt;/p&gt;

&lt;p&gt;One of my favorite examples of Domain-Specific Languages is a simple OpenGL library
that I wrote some time ago for composing 3D graphics in F#. You can see it in my 
NDC 2014 talk &lt;a href="http://vimeo.com/97315970"&gt;Domain Specific Languages, the functional way&lt;/a&gt;
and I also used it for &lt;a href="http://tomasp.net/blog/2014/puzzling-fsharp/index.html"&gt;Solving Puzzles with F#&lt;/a&gt;
earlier on this blog.&lt;/p&gt;

&lt;p&gt;The nice thing about the library is that it is very simple, but is rich enough to demonstrate
all the important concepts. In fact, the library is so easy to use that &lt;a href="https://twitter.com/ptrelford/status/538098139430137856"&gt;even 8 years old can
do a talk about it&lt;/a&gt;. So, if you're
spending Christmas with your family, perhaps you can go through this article with your children!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>New features and improvements in Deedle v1.0</title>
      <guid>http://tomasp.net/blog/2014/deedle-v1</guid>
      <link>http://tomasp.net/blog/2014/deedle-v1/index.html</link>
      <pubDate>Tue, 27 May 2014 14:41:01 GMT</pubDate>
      <description>&lt;p&gt;As Howard Mansell already &lt;a href="http://techblog.bluemountaincapital.com/2014/05/21/deedle-v1-0-release/"&gt;announced on the BlueMountain Tech blog&lt;/a&gt;,
we have officially released the "1.0" version of Deedle. In case you have not 
heard of Deedle yet, it is a .NET library for interactive data analysis and 
exploration. Deedle works great with both C# and F#. It provides two main data
structures: &lt;em&gt;series&lt;/em&gt; for working with data and time series and &lt;em&gt;frame&lt;/em&gt; for working
with collections of series (think CSV files, data tables etc.)&lt;/p&gt;

&lt;p&gt;The great thing about Deedle is that it has been becoming a foundational library
that makes it possible to integrate a wide range of diverse data-science components.
For example, the &lt;a href="http://bluemountaincapital.github.io/FSharpRProvider/"&gt;R type provider&lt;/a&gt;
works well with Deedle and so does &lt;a href="http://fsharp.github.io/FSharp.Charting/"&gt;F# Charting&lt;/a&gt;.
We've been also working on integrating all of these into a single package called 
&lt;a href="https://github.com/tpetricek/FsLab"&gt;FsLab&lt;/a&gt;, but more about that next time!&lt;/p&gt;

&lt;p&gt;In this blog post, I'll have a quick look at a couple of new features in Deedle 
(and corresponding R type provider release). Howard's announcement has a 
&lt;a href="http://techblog.bluemountaincapital.com/2014/05/21/deedle-v1-0-release/"&gt;more detailed list&lt;/a&gt;, 
but I just want to give a couple of examples and briefly comment on performance
improvements we did.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Welcome fsharpWorks &amp; F# events</title>
      <guid>http://tomasp.net/blog/2014/fsharpworks-events</guid>
      <link>http://tomasp.net/blog/2014/fsharpworks-events/index.html</link>
      <pubDate>Tue, 20 May 2014 12:47:06 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2014/fsharpworks-events/logo-sm.png" style="width:150px;float:right;margin-left:5px" /&gt;

&lt;p&gt;If you are following me or the &lt;a href="https://twitter.com/hashtag/fsharp"&gt;#fsharp&lt;/a&gt; hashtag on Twitter,
you might have already come across a link to &lt;a href="http://fsharpworks.com/"&gt;fsharpWorks&lt;/a&gt; or one of the
upcoming F# events organized by fsharpWorks. So, what is fsharpWorks and what are we planning
for you?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Stateful computations in F# with update monads</title>
      <guid>http://tomasp.net/blog/2014/update-monads</guid>
      <link>http://tomasp.net/blog/2014/update-monads/index.html</link>
      <pubDate>Tue, 13 May 2014 14:41:01 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2014/update-monads/code.png" style="float:right;margin:20px;width:200px" /&gt;

&lt;p&gt;Most discussions about monads, even in F#, start by looking at the well-known standard 
monads for handling state from Haskell. The &lt;em&gt;reader&lt;/em&gt; monad gives us a way to propagate 
some read-only state, the &lt;em&gt;writer&lt;/em&gt; monad makes it possible to (imperatively) produce 
values such as logs and the &lt;em&gt;state&lt;/em&gt; monad encapsulates state that can be read and changed.&lt;/p&gt;

&lt;p&gt;These are no doubt useful in Haskell, but I never found them as important for F#.
The first reason is that F# supports state and mutation and often it is just easier
to use a mutable state. The second reason is that you have to implement three 
different computation builders for them. This does not fit very well with the F# style
where you need to name the computation explicitly, e.g. by writing &lt;code&gt;async { ... }&lt;/code&gt;
(See also my &lt;a href="http://tomasp.net/blog/2013/computation-zoo-padl"&gt;recent blog about the F# Computation Zoo paper&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;When visiting the Tallinn university in December (thanks to James Chapman, Juhan Ernits 
&amp;amp; Tarmo Uustalu for hosting me!), I discovered the work on &lt;em&gt;update monads&lt;/em&gt; by Danel Ahman 
and Tarmo Uustalu on &lt;a href="http://cs.ioc.ee/~tarmo/papers/types13.pdf"&gt;update monads&lt;/a&gt;, which elegantly unifies &lt;em&gt;reader&lt;/em&gt;, &lt;em&gt;writer&lt;/em&gt; and 
&lt;em&gt;state&lt;/em&gt; monads using a single abstraction.&lt;/p&gt;

&lt;p&gt;In this article, I implement the idea of &lt;em&gt;update monads&lt;/em&gt; in F#. Update monads are 
parameterized by &lt;em&gt;acts&lt;/em&gt; that capture the operations that can be done on the state.
This means that we can define just a single computation expression &lt;code&gt;update { ... }&lt;/code&gt; 
and use it for writing computations of all three aforementioned kinds.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What can programming language research learn from the philosophy of science?</title>
      <guid>http://tomasp.net/blog/2014/philosophy-pl</guid>
      <link>http://tomasp.net/blog/2014/philosophy-pl/index.html</link>
      <pubDate>Thu, 10 Apr 2014 16:16:36 GMT</pubDate>
      <description>&lt;p&gt;As someone doing programming language research, I find it really interesting to think
about &lt;em&gt;how&lt;/em&gt; programming language research is done, how it has been done in the past
and how it &lt;em&gt;should&lt;/em&gt; be done. This kind of questions are usually asked by philosophy
of science, but only a few people have discussed this in the context of computing
(or even programming languages).&lt;/p&gt;

&lt;p&gt;So, my starting point was to look at the classic works in the general philosophy of science 
and see which of these could tell us something about programming languages.&lt;/p&gt;

&lt;p&gt;I wrote an article about some of these ideas and presented it last week at the
second symposium on &lt;a href="http://www.computing-conference.ugent.be/hapop2"&gt;History and Philosophy of Programming&lt;/a&gt;.
For me, it was amazing to talk with interesting people working on so many great 
related ideas! Anyway, now that the paper has been published and I did a talk, I should 
also share it on my blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tomasp.net/academic/papers/philosophy-pl/index.html"&gt;What can Programming Language Research Learn from the Philosophy of 
Science?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fairly minimalistic &lt;a href="http://tomasp.net/academic/papers/philosophy-pl/philosophy-pl-aisb.pdf"&gt;slides from my talk at the 
symposium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One feedback that I got when I submitted the paper to Onward! Essays last year was that
the paper uses a lot of philosophy of science terminology. This was partly the point of 
the paper, but the feedback inspired me to write a more readable overview in a form of 
blog post. So, if you want to get a quick peek at some of the ideas, you can also read
this short blog (and then perhaps go back to the paper)!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>BREAKING: Open-source C# 6.0 released</title>
      <guid>http://tomasp.net/blog/2014/csharp-6-released</guid>
      <link>http://tomasp.net/blog/2014/csharp-6-released/index.html</link>
      <pubDate>Tue, 01 Apr 2014 13:24:30 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2014/csharp-6-released/csharp.jpg" style="width:170px;float:right;margin:15px" /&gt;

&lt;p&gt;At last, the long wait is finally over! After 4 years of waiting, the fully managed implementation
of the C# compiler [codenamed "Roslyn"][roslyn] has been finally released. In the recent months, 
"Roslyn" has been slowly turning into [vaporware][vaporware], but thanks to the recent breakthrough,
the team made an enormous progress over the last two months and even implemented a number of new
C# 6.0 features.&lt;/p&gt;

&lt;p&gt;The C# 6.0 compiler, together with &lt;a href="http://fsharppowerpack.codeplex.com/SourceControl/latest#compiler/3.1/Nov2013/src/"&gt;the full source code&lt;/a&gt; has been released today!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; In case you are reading this article later than on the day when it was
published, let me just point out that this was released on 1 April 2014. Just to 
avoid any disappointments. Have fun ;-).&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Solving fun puzzles with F#</title>
      <guid>http://tomasp.net/blog/2014/puzzling-fsharp</guid>
      <link>http://tomasp.net/blog/2014/puzzling-fsharp/index.html</link>
      <pubDate>Tue, 25 Mar 2014 14:27:08 GMT</pubDate>
      <description>&lt;p&gt;Do you need to convince your friends &amp;amp; family that programming can be fun? 
For the last Christmas, I got a puzzle as a gift. It is a number of small
cubes, joined together, that can be rotated and folded to form a bigger
(4x4x4) cube.&lt;/p&gt;

&lt;p&gt;We spent the last few days of the year with family and a couple of friends
and I left the puzzle on the table. Every time I walked around, someone was
playing with it without much success. In the end, I said that if noone solves
it until 31 December, I'll write a program to do it. Which I did between 7 PM
and 8 PM and, voilà, here is what I got...&lt;/p&gt;

&lt;div style="text-align:center;margin:10px"&gt;
&lt;a href="http://tomasp.net/blog/2014/puzzling-fsharp/puzzle.jpg" target="_blank"&gt;&lt;img src="http://tomasp.net/blog/2014/puzzling-fsharp/puzzle.jpg" style="height:200px;margin-right:20px;border-style:none" /&gt;&lt;/a&gt;
&lt;a href="http://tomasp.net/blog/2014/puzzling-fsharp/cube.jpg" target="_blank"&gt;&lt;img src="http://tomasp.net/blog/2014/puzzling-fsharp/cube.jpg" style="height:200px;margin-left:20px;border-style:none" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;So, how do you solve a puzzle in about 1 hour on New Year's eve?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Advent Art: Generating Hokusai paintings</title>
      <guid>http://tomasp.net/blog/2014/japan-advent-art-en</guid>
      <link>http://tomasp.net/blog/2014/japan-advent-art-en/index.html</link>
      <pubDate>Tue, 21 Jan 2014 17:49:00 GMT</pubDate>
      <description>&lt;div id="myModal" class="reveal-modal xlarge" data-reveal&gt;
  &lt;iframe src="http://tomasp.net/blog/2014/japan-advent-art-en/hokusai.html" style="width:100%; height:850px;border-style:none;"&gt;&lt;/iframe&gt;
  &lt;a class="close-reveal-modal"&gt;&amp;#215;&lt;/a&gt;
&lt;/div&gt;

&lt;div class="rdecor" style="text-align:center"&gt;
&lt;a href="#" data-reveal-id="myModal" style="text-align:center"&gt;
&lt;img src="http://tomasp.net/blog/2014/japan-advent-art-en/hokusai_sm.jpg" style="margin-bottom:10px;border:4px solid black" title="The Great Wave off Kanagawa" /&gt;&lt;br /&gt;
&lt;small style="font-size:90%"&gt;Click here to see the result live!&lt;/small&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;For the last few years, the Japanese F# community has been running the F# Advent Calendar 
(&lt;a href="http://atnd.org/events/10685"&gt;2010&lt;/a&gt;, &lt;a href="http://partake.in/events/1c24993a-c475-4fc2-bca4-7a1cd2f81869"&gt;2011&lt;/a&gt;, &lt;a href="http://atnd.org/events/33927"&gt;2012&lt;/a&gt;). 
Each advent day, one person writes an article about something interesting in F#. I have 
been following the advent calendar last year on Twitter and when the planning started for 
this year, I offered to write an article too. You might have noticed that I posted a 
&lt;a href="http://tomasp.net/blog/2013/japan-advent-art/index.html"&gt;Japanse version of the article&lt;/a&gt;
in December as part of the &lt;a href="http://connpass.com/event/3935/"&gt;advent calendar 2013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A number of people helped to make this happen - &lt;a href="http://twitter.com/igeta"&gt;@igeta&lt;/a&gt; arranged everything and 
helped with reviewing, &lt;a href="http://twitter.com/yukitos"&gt;@yukitos&lt;/a&gt; translated the article and 
&lt;a href="http://twitter.com/gab_km"&gt;@gab_km&lt;/a&gt; reviewed the translation. Thanks!&lt;/p&gt;

&lt;p&gt;But what should I write about? It would be nice to look at some of the F# open-source libraries
and projects that have been developing over the last year in the F# community. At the same time,
can I relate the topic of the article to Japan? After some thinking, I came up with the following
plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, we'll use the &lt;a href="http://fsharp.github.io/FSharp.Data/"&gt;F# Data&lt;/a&gt; library and the &lt;a href="http://www.freebase.com"&gt;Freebase&lt;/a&gt; to learn
something about Japanese art. I should add that thanks to &lt;a href="https://twitter.com/yukitos"&gt;@yukitos&lt;/a&gt; the library now also has
a &lt;a href="http://fsharp.github.io/FSharp.Data/jp"&gt;documentation in Japanese&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we'll pick one art work and try to recreate it in F#. Given my artistic skills, this 
part will definitely fail, but we can try :-).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we'll use the &lt;a href="http://funscript.info"&gt;FunScript project&lt;/a&gt; to turn our F# code into
JavaScript, so that we can run it as a pure HTML web application that also works on mobile
phones and other devices.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Coeffects: The next big programming challenge</title>
      <guid>http://tomasp.net/blog/2014/why-coeffects-matter</guid>
      <link>http://tomasp.net/blog/2014/why-coeffects-matter/index.html</link>
      <pubDate>Wed, 08 Jan 2014 15:31:49 GMT</pubDate>
      <description>&lt;p&gt;Many advances in programming language design are driven by some practical motivations.
Sometimes, the practical motivations are easy to see - for example, when they come from
some external change such as the rise of multi-core processors. Sometimes, discovering 
the practical motivations is a tricky task - perhaps because everyone is used to a 
certain way of doing things that we do not even &lt;em&gt;see&lt;/em&gt; how poor our current solution is.&lt;/p&gt;

&lt;p&gt;The following two examples are related to the work done in F# (because this is what
I'm the most familiar with), but you can surely find similar examples in other languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multi-core&lt;/strong&gt; is an easy to see challenge caused by an external development. 
It led to the popularity of &lt;em&gt;immutable&lt;/em&gt; data structures (and functional programming,
in general) and it was also partly motivation for &lt;a href="http://msdn.microsoft.com/en-us/library/dd233250.aspx" title="Asynchronous Workflows (F#)"&gt;asynchronous workflows&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data access&lt;/strong&gt; is a more subtle challenge. Technologies like &lt;a href="http://msdn.microsoft.com/en-us/library/bb397926.aspx" title="LINQ (Language-Integrated Query)"&gt;LINQ&lt;/a&gt; make it
significantly easier, but it was not easy to see that inline SQL was a poor solution.
This is even more the case for F# &lt;em&gt;type providers&lt;/em&gt;. You will not realize how poor the
established data access story is until you &lt;em&gt;see&lt;/em&gt; something like
the &lt;a href="http://www.youtube.com/watch?v=cCuGgA9Yqrs" title="F# R Type Provider Demo"&gt;WorldBank and R provider&lt;/a&gt; or &lt;a href="http://fsharp.github.io/FSharp.Data/library/CsvProvider.html" title="F# Data: CSV type provider"&gt;CSV type provider&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I believe that the next important practical challenge for programming language designers
is of the kind that is not easy to see - because we are so used to doing things in 
certain ways that we cannot see how poor they are. The problem is designing languages
that are better at working with (and understanding) the &lt;em&gt;context&lt;/em&gt; in which programs are
executed.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Advent Art：北斎の絵を生成する</title>
      <guid>http://tomasp.net/blog/2013/japan-advent-art</guid>
      <link>http://tomasp.net/blog/2013/japan-advent-art/index.html</link>
      <pubDate>Tue, 24 Dec 2013 03:58:37 GMT</pubDate>
      <description>&lt;div id="myModal" class="reveal-modal xlarge" data-reveal&gt;
  &lt;iframe src="http://tomasp.net/blog/2013/japan-advent-art/hokusai.html" style="width:100%; height:850px;border-style:none;"&gt;&lt;/iframe&gt;
  &lt;a class="close-reveal-modal"&gt;&amp;#215;&lt;/a&gt;
&lt;/div&gt;

&lt;div class="rdecor" style="text-align:center"&gt;
&lt;a href="#" data-reveal-id="myModal" style="text-align:center"&gt;
&lt;img src="http://tomasp.net/blog/2013/japan-advent-art/hokusai_sm.jpg" style="margin-bottom:10px;border:4px solid black" title="神奈川沖浪裏 (The Great Wave off Kanagawa)" /&gt;&lt;br /&gt;
&lt;small style="font-size:90%"&gt;実際の結果を見るにはここをクリック！&lt;/small&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;ここ数年、日本のF# コミュニティは「F# Advent Calendar」というイベントを開催しています
(&lt;a href="http://atnd.org/events/10685"&gt;2010年&lt;/a&gt;、
&lt;a href="http://partake.in/events/1c24993a-c475-4fc2-bca4-7a1cd2f81869"&gt;2011年&lt;/a&gt;、
&lt;a href="http://atnd.org/events/33927"&gt;2012年&lt;/a&gt;、
そして &lt;a href="http://connpass.com/event/3935/"&gt;今年&lt;/a&gt;)。
これはadvent dayごとに1人ずつ、F#に関連した何かしら興味深い記事を作成するというものです。
私は去年からTwitterでadvent calendarをチェックしていて、
今年からは私も参加しようと思い、記事を書きたいと申し出ました。
そうしたところ、数名の方からの協力を得ることができました。
&lt;a href="https://twitter.com/igeta"&gt;@igeta&lt;/a&gt; には参加手続きの諸々とレビューを、
&lt;a href="http://twitter.com/yukitos"&gt;@yukitos&lt;/a&gt; にはこの記事の翻訳を、そして
&lt;a href="http://twitter.com/gab_km"&gt;@gab_km&lt;/a&gt; には翻訳のレビューをしていただきました。
ありがとう！&lt;/p&gt;

&lt;p&gt;けれども何についての記事を書くのがよいのでしょう？
過去一年にわたって、F#コミュニティで開発されているF#のオープンソースライブラリやプロジェクトを
いくつか紹介できるような記事がよさそうです。
それと同時に、日本に関連のあるトピックが何かないものでしょうか？
少し考えてみたところ、以下のようなプランを思いつきました：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まず、日本の絵画について学ぶために &lt;a href="http://fsharp.github.io/FSharp.Data/"&gt;F# Data&lt;/a&gt; ライブラリと &lt;a href="http://www.freebase.com"&gt;Freebase&lt;/a&gt; を組み合わせて使う。
このライブラリにはいまや &lt;a href="https://github.com/fsharp/FSharp.Data/blob/master/docs/content/ja/index.md"&gt;日本語ドキュメント&lt;/a&gt; があり、作成してくれた &lt;a href="https://twitter.com/yukitos"&gt;@yukitos&lt;/a&gt; に感謝しています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;そして絵画作品を1つ選択して、F#でその作品を再生成する。
私の絵画スキルでは到底無理なのですが、試してみることはできます :-)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最後に、 &lt;a href="http://funscript.info"&gt;FunScriptプロジェクト&lt;/a&gt; を使って
F#コードをJavaScriptに変換します。
そうすると純粋なHTML Webアプリケーションとして実行できるようになり、
携帯電話やその他のデバイスでも動作するようになります。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>The F# Computation Expression Zoo (PADL'14)</title>
      <guid>http://tomasp.net/blog/2013/computation-zoo-padl</guid>
      <link>http://tomasp.net/blog/2013/computation-zoo-padl/index.html</link>
      <pubDate>Fri, 08 Nov 2013 06:42:56 GMT</pubDate>
      <description>&lt;p&gt;F# &lt;a href="http://msdn.microsoft.com/en-us/library/dd233182.aspx"&gt;computation expressions&lt;/a&gt; are the 
syntactic language mechanism that is used by features like sequence expressions and asynchronous
workflows. The aim of F# computation expressions is to provide a &lt;em&gt;single&lt;/em&gt; syntactic mechanism
that provides convenient notation for writing a wide range of computations.&lt;/p&gt;

&lt;p&gt;The syntactic mechanisms that are unified by computation expressions include Haskell &lt;code&gt;do&lt;/code&gt; 
notation and list comprehensions, C# iterators, asynchronous methods and LINQ queries,
Scala &lt;code&gt;for&lt;/code&gt; comprehensions and Python generators to name just a few.&lt;/p&gt;

&lt;p&gt;Some time ago, I started working on an academic article to explain what makes computation
expressions unique - and I think there is quite a few interesting aspects. Sadly, this is 
often not very well explained and so the general perception is more like this...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building great open-source libraries</title>
      <guid>http://tomasp.net/blog/2013/great-open-source</guid>
      <link>http://tomasp.net/blog/2013/great-open-source/index.html</link>
      <pubDate>Thu, 31 Oct 2013 13:29:06 GMT</pubDate>
      <description>&lt;a href="http://tpetricek.github.io/FSharp.Formatting/"&gt;
&lt;img src="http://tpetricek.github.io/FSharp.Formatting/misc/logo.png" alt="F# documentation tools" class="rdecor" style="width:150px;height:150px" /&gt;
&lt;/a&gt;

&lt;p&gt;The hard part about successful open-source development is not putting the first 
version of your source code on GitHub. The hard part is what comes next. First
of all, there are &lt;em&gt;community aspects&lt;/em&gt; - making sure that the project fits well with
other work in the area, engaging the community and contributors, planing future
directions for the project and so on. Secondly, there is an &lt;em&gt;infrastructural side&lt;/em&gt; - 
making sure that there is a package (on &lt;a href="http://www.nuget.org/packages?q=fsharp"&gt;NuGet in the F# world&lt;/a&gt;),
easy to run and useful tests and also up-to-date documentation and tutorials.&lt;/p&gt;

&lt;p&gt;In this article, I want to talk about the &lt;em&gt;infrastructural side&lt;/em&gt;, which is 
easier of the two, but nevertheless, difficult to get right!
Fortunately, the F# community made an amazing progress in this direction, so let's
have a look at some of the tools that make this possible...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How many tuple types are there in C#?</title>
      <guid>http://tomasp.net/blog/2013/tuples-in-csharp</guid>
      <link>http://tomasp.net/blog/2013/tuples-in-csharp/index.html</link>
      <pubDate>Tue, 17 Sep 2013 13:11:57 GMT</pubDate>
      <description>&lt;p&gt;In a &lt;a href="http://stackoverflow.com/questions/18718232/when-should-i-write-my-functions-in-curried-form/18721711"&gt;recent StackOverflow question&lt;/a&gt;
the poster asked about the difference between &lt;em&gt;tupled&lt;/em&gt; and &lt;em&gt;curried&lt;/em&gt; form of a function in F#. 
In F#, you can use pattern matching to easily define a function that takes a tuple as an argument.
For example, the poster's function was a simple calculation that multiplies the number 
of units sold &lt;em&gt;n&lt;/em&gt; by the price &lt;em&gt;p&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="fssnip"&gt;
&lt;span class="l"&gt;1: &lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_1', 1)" onmouseover="showTip(event, 'abs159_1', 1)" class="i"&gt;salesTuple&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs159_2', 2)" onmouseover="showTip(event, 'abs159_2', 2)" class="i"&gt;price&lt;/span&gt;, &lt;span onmouseout="hideTip(event, 'abs159_3', 3)" onmouseover="showTip(event, 'abs159_3', 3)" class="i"&gt;count&lt;/span&gt;) &lt;span class="o"&gt;=&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_2', 4)" onmouseover="showTip(event, 'abs159_2', 4)" class="i"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs159_4', 5)" onmouseover="showTip(event, 'abs159_4', 5)" class="i"&gt;float&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_3', 6)" onmouseover="showTip(event, 'abs159_3', 6)" class="i"&gt;count&lt;/span&gt;)&lt;/pre&gt;
&lt;p&gt;The function takes a single argument of type &lt;code&gt;Tuple&amp;lt;float, int&amp;gt;&lt;/code&gt; (or, using the nicer F# notation
&lt;code&gt;float * int&lt;/code&gt;) and immediately decomposes it into two variables, &lt;code&gt;price&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt;. The other
alternative is to write a function in the &lt;em&gt;curried&lt;/em&gt; form:&lt;/p&gt;
&lt;pre class="fssnip"&gt;
&lt;span class="l"&gt;1: &lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_5', 7)" onmouseover="showTip(event, 'abs159_5', 7)" class="i"&gt;salesCurried&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_2', 8)" onmouseover="showTip(event, 'abs159_2', 8)" class="i"&gt;price&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_3', 9)" onmouseover="showTip(event, 'abs159_3', 9)" class="i"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_2', 10)" onmouseover="showTip(event, 'abs159_2', 10)" class="i"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs159_4', 11)" onmouseover="showTip(event, 'abs159_4', 11)" class="i"&gt;float&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs159_3', 12)" onmouseover="showTip(event, 'abs159_3', 12)" class="i"&gt;count&lt;/span&gt;)&lt;/pre&gt;
&lt;p&gt;Here, we get a function of type &lt;code&gt;float -&amp;gt; int -&amp;gt; float&lt;/code&gt;. Usually, you can read this just as a 
function that takes &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; and returns &lt;code&gt;float&lt;/code&gt;. However, you can also use &lt;em&gt;partial
function application&lt;/em&gt; and call the function with just a single argument - if the price of
an apple is $1.20, we can write &lt;code&gt;salesCurried 1.20&lt;/code&gt; to get a &lt;em&gt;new&lt;/em&gt; function that takes just
&lt;code&gt;int&lt;/code&gt; and gives us the price of specified number of apples. The poster's question was:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So when I want to implement a function that would have taken &lt;em&gt;n &gt; 1&lt;/em&gt; arguments, 
should I for example always use a curried function in F# (...)? Or should I take 
the simple route and use regular function with an n-tuple and curry later on 
if necessary?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see &lt;a href="http://stackoverflow.com/questions/18718232/when-should-i-write-my-functions-in-curried-form/18721711#18721711"&gt;my answer on StackOverflow&lt;/a&gt;.
The point of this short introduction was that the question inspired me to think about how
the world looks from the C# perspective...&lt;/p&gt;

&lt;div class="tip" id="abs159_1"&gt;val salesTuple : price:float * count:int -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Tuples-in-csharp_.salesTuple&lt;/div&gt;
&lt;div class="tip" id="abs159_2"&gt;val price : float&lt;/div&gt;
&lt;div class="tip" id="abs159_3"&gt;val count : int&lt;/div&gt;
&lt;div class="tip" id="abs159_4"&gt;Multiple items&lt;br /&gt;val float : value:&amp;#39;T -&amp;gt; float (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float = System.Double&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float&amp;lt;&amp;#39;Measure&amp;gt; = float&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class="tip" id="abs159_5"&gt;val salesCurried : price:float -&amp;gt; count:int -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Tuples-in-csharp_.salesCurried&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Hello New York. Learn some F#!</title>
      <guid>http://tomasp.net/blog/2013/fsharp-new-york</guid>
      <link>http://tomasp.net/blog/2013/fsharp-new-york/index.html</link>
      <pubDate>Thu, 29 Aug 2013 13:02:06 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2013/fsharp-new-york/nyc.jpg" class="rdecor" title="I'm cheating a little - the photo is from my previous visit in April." style="margin-left:20px;margin-bottom:15px"/&gt;

&lt;p&gt;Exactly two weeks ago, I started a three month internship at BlueMountain Capital in New York.
They have a &lt;a href="http://techblog.bluemountaincapital.com/"&gt;technical blog&lt;/a&gt; and should be well known to the
F# community thanks to the &lt;a href="https://github.com/BlueMountainCapital/FSharpRProvider"&gt;R type provider&lt;/a&gt;
which was written by Howard Mansell (&lt;a href="https://twitter.com/hmansell"&gt;@hmansell&lt;/a&gt;).
I'll have the pleasure of working with Howard on some more open source data-science related tools for F#
(and C#). I'll write more about these when we have something to share, but if you want to
contribute and help us, join the Data and Machine Learning &lt;a href="http://fsharp.org/technical-groups/"&gt;working group at F# Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aside from my work, I'm also happy to get involved with the great F# community in New York!
We already have some events planned - &lt;strong&gt;Progressive F# Tutorials&lt;/strong&gt; and &lt;strong&gt;FastTrack to F#&lt;/strong&gt; are
scheduled for September 16.-19. so you can become an F# guru in 4 days :-). But I'm also happy
to have a chat with anyone interested in F# and perhaps do a lunch time talk, if you need to
convince your colleagues or boss that F# is a good choice.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>