<rss version="2.0">
  <channel>
    <title>Tomas Petricek's blog</title>
    <link>http://tomasp.net</link>
    <description>Writing about software development in F# and .NET, sharing materials from my F# trainings and talks, writing about programming language research and theory.</description>
    <item>
      <title>Happy New Year 2016 around the World</title>
      <guid>http://tomasp.net/blog/2015/happy-new-year-tweets</guid>
      <link>http://tomasp.net/blog/2015/happy-new-year-tweets/index.html</link>
      <pubDate>Wed, 30 Dec 2015 18:09:34 GMT</pubDate>
      <description>&lt;p&gt;Just like &lt;a href="http://tomasp.net/blog/2014/composing-christmas/"&gt;last year&lt;/a&gt; and the 
&lt;a href="http://tomasp.net/blog/2013/japan-advent-art/index.html"&gt;year&lt;/a&gt; 
&lt;a href="http://tomasp.net/blog/2014/japan-advent-art-en/"&gt;before&lt;/a&gt;, I wanted to participate in the
&lt;a href="https://sergeytihon.wordpress.com/2015/10/25/f-advent-calendar-in-english-2015/"&gt;#FsAdvent&lt;/a&gt;
event, where someone writes a blog post about something they did with F# during December. 
Thanks to &lt;a href="https://sergeytihon.wordpress.com/"&gt;Sergey Tihon&lt;/a&gt; for the organization of the English
version and the &lt;a href="http://connpass.com/event/22056/"&gt;Japanese F# community&lt;/a&gt; for coming up with the 
idea a few years ago!&lt;/p&gt;

&lt;p&gt;As my blog post ended up on 31 December, I wanted to do something that would fit well with the
theme of ending of 2015 and starting of the new year 2016 and so I decided to write a little 
interactive web site that tracks the "Happy New Year" tweets live across the globe. This is
partly inspired by &lt;a href="http://twitter.github.io/interactive/newyear2014/"&gt;Happy New Year Tweets&lt;/a&gt;
from Twitter in 2014, but rather than analyzing data in retrospect, you can watch 2016 come live!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Philosophy of science books every computer scientist should read</title>
      <guid>http://tomasp.net/blog/2015/reading-list</guid>
      <link>http://tomasp.net/blog/2015/reading-list/index.html</link>
      <pubDate>Thu, 10 Dec 2015 12:42:25 GMT</pubDate>
      <description>&lt;p&gt;When I tell my fellow computer scientists or software developers that I'm interested in 
&lt;em&gt;philosophy of science&lt;/em&gt;, they first look a bit confused, then we have a really interesting 
discussion about it and then they ask me for some interesting books they could read about it.
Given that Christmas is just around the corner and some of the readers might still be looking
for a good present to get, I thought that now is the perfect time to turn my answer into a
blog post!&lt;/p&gt;

&lt;p&gt;So, what is philosophy of science about? In summary, it is about trying to better understand 
science. I'll keep using the word &lt;em&gt;science&lt;/em&gt; here, but I think &lt;em&gt;engineering&lt;/em&gt; would work equally
well. As someone who recently spent a couple of years doing a PhD on programming language theory,
I find this extremely important for computer science (and programming). How can we make better
programming languages if we do not know what &lt;em&gt;better&lt;/em&gt; means? And what do we mean when we talk
about very basic concepts like &lt;em&gt;types&lt;/em&gt; or programming &lt;em&gt;errors&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Reading about philosophy of science inspired me to write a couple of essays on some of the 
topics above including &lt;a href="/blog/2014/philosophy-pl/"&gt;What can programming language research learn from the philosophy of science?&lt;/a&gt; and two essays that discuss the &lt;a href="/blog/2015/against-types/"&gt;nature of types in programming languages&lt;/a&gt; and also
the nature of &lt;a href="/blog/2015/failures/"&gt;errors and miscomputations&lt;/a&gt;. This blog post lists some of
the interesting books that I've read and that influenced my thinking (not just) when writing the
aforementioned essays.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>F# + ML |&gt; MVP Summit Talks</title>
      <guid>http://tomasp.net/blog/2015/fsharp-ml-mvp</guid>
      <link>http://tomasp.net/blog/2015/fsharp-ml-mvp/index.html</link>
      <pubDate>Wed, 18 Nov 2015 02:03:44 GMT</pubDate>
      <description>&lt;a href="http://www.functional-programming.net"&gt;
&lt;img src="http://tomasp.net/blog/2015/fsharp-ml-mvp/fsml.png" style="width:200px;float:right;margin:0px 0px 15px 15px" /&gt;
&lt;/a&gt;

&lt;p&gt;I was fortunate enough to make it to the Microsoft MVP summit this year. I didn't learn anything 
secret (and even if I did, I wouldn't tell you!) but one thing I did learn is that there is a lot
of interest in data science and machine learning both inside Microsoft and in the MVP community.
What was less expected and more exciting was that there was also a lot of interest in F#, which 
is a perfect fit for both of these topics!&lt;/p&gt;

&lt;p&gt;When I visited Microsoft back in May to talk about &lt;a href="http://tpetricek.github.io/Talks/2015/scalable-ml-ds-fsharp/redmond/"&gt;Scalable Machine Learning and Data Science 
with F#&lt;/a&gt; at an internal event, 
I ended up chatting with the organizer about F# and we agreed that it would be nice to do more
on F#, which is how we ended up organizing the &lt;a href="http://fsharpworks.com/mvp-summit/2015.html"&gt;F# + ML |&amp;gt; MVP Summit 2015&lt;/a&gt;
mini-conference on the Friday after the summit.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Gamma: Simple code behind interactive articles</title>
      <guid>http://tomasp.net/blog/2015/thegamma</guid>
      <link>http://tomasp.net/blog/2015/thegamma/index.html</link>
      <pubDate>Mon, 28 Sep 2015 16:07:08 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/thegamma/dj.png" style="float:right;width:300px"
  title="Illustration from 'The Data Journalism Handbook'" /&gt;

&lt;p&gt;There are huge amounts of data around us that we could use to better understand the world.
Every company collects large amounts of data about their sales or customers. Governments and
international organizations increasingly release interesting data sets to the public through
various &lt;em&gt;open government data&lt;/em&gt; initiatives (&lt;a href="http://data.gov"&gt;data.gov&lt;/a&gt; or 
&lt;a href="http://data.gov.uk"&gt;data.gov.uk&lt;/a&gt;). But raw data does not tell you much.&lt;/p&gt;

&lt;p&gt;An interesting recent development is &lt;em&gt;data journalism&lt;/em&gt;. Data journalists tell stories using
data. A data driven article is based on an interesting observation from the data, it includes
(interactive) visualizations that illustrate the point and it often allows the reader to get
the raw data.&lt;/p&gt;

&lt;p&gt;Adding a chart produced in, say, Excel to an article is easy, but building good interactive
visualization is much harder. Ideally, the data driven article should not be just text with
static pictures, but a &lt;em&gt;program&lt;/em&gt; that links the original data source to the visualization.
This lets readers explore how the data is used, update the content when new data is available
and change parameters of the visualization if they need to understand different aspect of the
topic.&lt;/p&gt;

&lt;p&gt;This is in short what I'm trying to build with &lt;a href="http://thegamma.net"&gt;The Gamma project&lt;/a&gt;. If
you're interested in building better reports or data driven articles, continue reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;img src="http://tomasp.net/blog/2015/thegamma/sl.png" style="float:right;width:150px" /&gt;

  &lt;p&gt;I did a talk about The Gamma project at the fantastic &lt;a href="http://www.future-programming.org/programSL.html"&gt;Future Programming workshop&lt;/a&gt;
at the &lt;a href="http://www.thestrangeloop.com/"&gt;StrangeLoop conference&lt;/a&gt; last week (thanks for inviting me!)
and there is a &lt;a href="https://www.youtube.com/watch?v=cYoO2RvZn7Y&amp;amp;feature=youtu.be&amp;amp;a"&gt;recording of my 40 minute talk on YouTube&lt;/a&gt;,
so if you prefer to watch videos, check it out!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Are you a data journalist or data analyst? We're looking for early partners!
I joined the &lt;a href="http://www.joinef.com" title="Nothing to do with Entity Framework, don't worry!"&gt;EF
programme&lt;/a&gt; to work on this and if the project sounds like something you'd like to see happen,
&lt;a href="mailto:tomas@tomasp.net"&gt;please get in touch&lt;/a&gt; or share your contact details
on &lt;a href="http://thegamma.net"&gt;The Gamma page&lt;/a&gt;!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creating web sites with Suave: How to contribute to F# Snippets</title>
      <guid>http://tomasp.net/blog/2015/fssnip-suave</guid>
      <link>http://tomasp.net/blog/2015/fssnip-suave/index.html</link>
      <pubDate>Tue, 15 Sep 2015 22:26:01 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/fssnip-suave/logo.png" style="width:130px;float:right;margin-left:10px" /&gt;

&lt;p&gt;The core of many web sites and web APIs is very simple. Given an HTTP request,
produce a HTTP response. In F#, we can represent this as a function with type
&lt;code&gt;Request -&amp;gt; Response&lt;/code&gt;. To make our server scalable, we should make the function
&lt;em&gt;asynchronous&lt;/em&gt; to avoid unnecessary blocking of threads. In F#, this can be 
captured as &lt;code&gt;Request -&amp;gt; Async&amp;lt;Response&amp;gt;&lt;/code&gt;. Sounds pretty simple, right? So why 
are there so many &lt;a href="http://tomasp.net/blog/2015/library-frameworks/"&gt;evil frameworks&lt;/a&gt;
that make simple web programming difficult?&lt;/p&gt;

&lt;p&gt;Fortunately, there is a nice F# library called &lt;a href="http://suave.io"&gt;Suave.io&lt;/a&gt; that 
is based exactly on the above idea:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suave is a simple web development F# library providing a lightweight web server 
and a set of combinators to manipulate route flow and task composition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I recently decided to start a new version of the &lt;a href="http://www.fssnip.net"&gt;F# Snippets&lt;/a&gt;
web site and I wanted to keep the implementation functional, simple, 
cross-platform and easy to contrbute to. I wrote a &lt;a href="https://github.com/tpetricek/FsSnip.Website/"&gt;first prototype of the 
implementation&lt;/a&gt; using Suave and 
already received a few contributions via pull requests! In this blog post, I'll
share a few interesting aspects of the implementation and I'll give you some
good pointers where you can learn more about Suave. &lt;em&gt;There is no excuse for not
contributing to F# Snippets v2 after reading this blog post&lt;/em&gt;!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>In the age of the web: Typed functional-first programming revisited</title>
      <guid>http://tomasp.net/blog/2015/typed-revisited</guid>
      <link>http://tomasp.net/blog/2015/typed-revisited/index.html</link>
      <pubDate>Wed, 09 Sep 2015 16:14:07 GMT</pubDate>
      <description>&lt;p&gt;Most programming languages were designed before the age of web.
This matters because the web changes many assumptions that typed functional 
language designers tak for granted. For example, programs do not run in a 
&lt;em&gt;closed world&lt;/em&gt;, but must instead interact with (changing and likely unreliable) 
services and data sources, communication is often asynchronous or event-driven, 
and programs need to interoperate with untyped environments like JavaScript
libraries.&lt;/p&gt;

&lt;p&gt;How can statically-typed programming languages adapt to the modern world?
In this article, I look at one possible answer that is inspired by the F# 
language and various F# libraries. In F#, we use &lt;em&gt;type providers&lt;/em&gt; for 
integration with external information sources and for integration with untyped
programming environments. We use &lt;em&gt;lightweight meta-programming&lt;/em&gt; for targeting 
JavaScript and &lt;em&gt;computation expressions&lt;/em&gt; for writing asynchronous code.&lt;/p&gt;

&lt;p&gt;This blog post is a shorter version of a &lt;a href="http://tomasp.net/academic/papers/age-of-web/"&gt;ML workshop paper&lt;/a&gt;
that I co-authored earlier this year and you should see this more as a position
statement. I'm not sure if F# and the solutions shown here are the best ones,
but I think they highlight very important questions in programming language 
design that I very much see as unsolved.&lt;/p&gt;

&lt;p&gt;The article has two sections. First, I'll go through a simple case study showing
how F# can be used to build a client-side web widget. Then, I'll discuss some
of the implications for programming language design based on the example.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Miscomputation: Learning to live with errors</title>
      <guid>http://tomasp.net/blog/2015/failures</guid>
      <link>http://tomasp.net/blog/2015/failures/index.html</link>
      <pubDate>Mon, 27 Jul 2015 13:15:31 GMT</pubDate>
      <description>&lt;blockquote&gt;
&lt;img src="http://tomasp.net/blog/2015/failures/babbage.png" style="float:right;width:110px;margin:5px 0px 10px 20px" /&gt;

&lt;p style="margin-bottom:5px"&gt;If trials of three or four simple cases have been made, and are found
to agree with the results given by the engine, it is scarcely possible that there can be any error
(...).&lt;/p&gt;
&lt;p style="text-align:right"&gt;Charles Babbage, On the mathematical&lt;br /&gt; powers of the calculating engine (1837)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anybody who has something to do with modern computers will agree that the above statement made by
Charles Babbage about the analytical engine is understatement, to say the least.&lt;/p&gt;

&lt;p&gt;Computer programs do not always work as expected. There is a complex taxonomy of errors or
&lt;a href="http://link.springer.com/article/10.1007/s13347-013-0112-0"&gt;&lt;em&gt;miscomputations&lt;/em&gt;&lt;/a&gt;. The taxonomy of
possible errors is itself interesting. Syntax errors like missing semicolons are quite obvious
and are easy to catch. Logical errors are harder to find, but at least we know that something
went wrong. For example, our algorithm does not correctly sort some lists. There are also issues that
may or may not be actual errors. For example an algorithm in online store might suggest slightly
suspicious products. Finally, we also have concurrency errors that happen very rarely in some
very specific scenario.&lt;/p&gt;

&lt;p&gt;If Babbage was right, we would just try three or four simple cases and eradicate all errors from
our programs, but eliminating errors is not so easy. In retrospect, it is quite interesting to
see how long it took early computer engineers to realise that coding (i.e. translating
mathematical algorithm to program code) errors are a problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style="margin-bottom:5px"&gt;Errors in coding were only gradually recognized to be a signiﬁcant
problem: a typical early comment was that of Miller [circa 1949], who wrote that such errors,
along with hardware faults, could be "expected, in time, to become infrequent".&lt;/p&gt;
&lt;p style="text-align:right"&gt;Mark Priestley, Science of Operations (2011)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We &lt;em&gt;mostly&lt;/em&gt; got rid of hardware faults, but coding errors are still here. Programmers spent
over 50 years finding different practical strategies for dealing with them. In this
blog post, I want to look at four of the strategies. Quite curiously, there is a very wide range.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Visualizing interesting world facts with FsLab</title>
      <guid>http://tomasp.net/blog/2015/fslab-world-visualization</guid>
      <link>http://tomasp.net/blog/2015/fslab-world-visualization/index.html</link>
      <pubDate>Tue, 30 Jun 2015 15:07:13 GMT</pubDate>
      <description>&lt;p&gt;In case you missed my recent &lt;a href="http://tomasp.net/blog/2015/announcing-fslab/"&gt;official FsLab announcement&lt;/a&gt;, 
FsLab is a data-science package for .NET built around F# that makes it easy to get data using &lt;em&gt;type providers&lt;/em&gt;, 
analyze them interactively (with great R integration) and visualize the results. You can find more on
on &lt;a href="http://fslab.org"&gt;fslab.org&lt;/a&gt;, which also has links to &lt;a href="http://channel9.msdn.com/posts/Understanding-the-World-with-F"&gt;some&lt;/a&gt;
&lt;a href="https://channel9.msdn.com/Events/dotnetConf/2015/The-F-Path-to-Data-Scripting-Nirvana"&gt;videos&lt;/a&gt; and
&lt;a href="http://fslab.org/download/"&gt;download page with templates&lt;/a&gt; and other instructions.&lt;/p&gt;

&lt;p&gt;Last time, I mentioned that we are working on integrating FsLab with the &lt;a href="http://tahahachana.github.io/XPlot/"&gt;XPlot charting 
library&lt;/a&gt;. XPlot is a wonderful F# library built by 
&lt;a href="https://twitter.com/TahaHachana"&gt;Taha Hachana&lt;/a&gt; that wraps two powerful HTML5 visualization libraries - 
&lt;a href="https://developers.google.com/chart/"&gt;Google Charts&lt;/a&gt; and &lt;a href="https://plot.ly/"&gt;plot.ly&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I thought I'd see what interesting visualizations I can built with XPlot, so I opened the &lt;a href="http://fsharp.github.io/FSharp.Data/library/WorldBank.html"&gt;World Bank type
provider&lt;/a&gt; to get some data about the world
and Euro area, to make the blog post relevant to what is happening in the world today.&lt;/p&gt;

&lt;img src="http://tomasp.net/blog/2015/fslab-world-visualization/world-sm.png" /&gt;

</description>
    </item>
    <item>
      <title>Against the definition of types</title>
      <guid>http://tomasp.net/blog/2015/against-types</guid>
      <link>http://tomasp.net/blog/2015/against-types/index.html</link>
      <pubDate>Thu, 14 May 2015 14:46:36 GMT</pubDate>
      <description>&lt;blockquote&gt;
&lt;p style="margin-bottom:5px"&gt;Science is much more 'sloppy' and 'irrational' than its methodological image.&lt;/p&gt;
&lt;p style="text-align:right"&gt;Paul Feyerabend, Against Method (1975)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;a href="http://tomasp.net/academic/drafts/against-types/"&gt;
&lt;img src="http://tomasp.net/blog/2015/against-types/paper.png" style="float:right;margin:0px 0px 5px 20px;width:160px" /&gt;
&lt;/a&gt;

&lt;p&gt;Programming languages are a fascinating area because they combine computer science (and logic) with
many other disciplines including &lt;a href="http://lmeyerov.github.io/projects/socioplt/viz/index.html"&gt;sociology&lt;/a&gt;, &lt;a href="https://www.cl.cam.ac.uk/teaching/1415/P201/"&gt;human computer interaction&lt;/a&gt; and things
that cannot be scientifically quantified like intuition, taste and (for better or worse) politics.&lt;/p&gt;

&lt;p&gt;When we talk about programming languages, we often treat it mainly as scientific discussion seeking
some objective truth. This is not surprising - science is surrounded by an aura of perfection and
so it is easy to think that focusing on the core scientific essence (and leaving out everything)
else is the right way of looking at programming languages.&lt;/p&gt;

&lt;p&gt;However this leaves out many things that make programming languages interesting. I believe that one
way to fill the missing gap is to look at philosophy of science, which can help us understand how
programming language research is done and how it should be done. I wrote about the general idea
&lt;a href="http://tomasp.net/blog/2014/philosophy-pl/"&gt;in a blog post (and essay) last year&lt;/a&gt;. Today, I want to talk about one specific topic: &lt;em&gt;What
is the meaning of types?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This blog post is a shorter (less philosophical and more to the point) version of an essay that
I submitted to &lt;a href="http://2015.splashcon.org/track/onward2015-essays"&gt;Onward! Essays 2015&lt;/a&gt;. If you want to get a quick peek at the ideas in the
essay, then continue reading here! If you want to read the full essay (or save it for later),
you can get &lt;a href="http://tomasp.net/academic/drafts/against-types/"&gt;the full version from here&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Announcing FsLab: Data science package for Mono and .NET</title>
      <guid>http://tomasp.net/blog/2015/announcing-fslab</guid>
      <link>http://tomasp.net/blog/2015/announcing-fslab/index.html</link>
      <pubDate>Tue, 05 May 2015 14:55:01 GMT</pubDate>
      <description>&lt;img src="http://fslab.org/img/logos/fslab.png" style="width:120px;float:right;margin:10px" /&gt;

&lt;p&gt;After over a year of working on FsLab and talking about it at conferences, it is finally time 
for an official announcement. So, today, I'm excited to announce &lt;a href="http://www.fslab.org"&gt;FsLab&lt;/a&gt; -
a cross-platform package for doing data science with .NET and Mono.&lt;/p&gt;

&lt;p&gt;It is probably not necessary to explain why data science is an important area. We live 
surrounded by information, but extracting useful knowledge from the vast amounts of data is 
not an easy task. You have to access data in different formats (JSON-based REST services, XML, 
CSV files or even HTML tables), you need to deal with missing values, combine and align data 
from multiple sources and then build visualizations (or reports) to tell the right story.&lt;/p&gt;

&lt;p&gt;The goal of FsLab is to make this process easier. FsLab combines the power of F# type providers,
the efficiency and robustness of Mono and .NET and the high quality engineering of the 
open-source ecosystem around F# and C#.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Comparing date range handling in C# and F#</title>
      <guid>http://tomasp.net/blog/2015/restricting-ranges</guid>
      <link>http://tomasp.net/blog/2015/restricting-ranges/index.html</link>
      <pubDate>Wed, 22 Apr 2015 15:55:20 GMT</pubDate>
      <description>&lt;p&gt;I was recently working on some code for handling date ranges in 
&lt;a href="http://github.com/blueMountainCapital/Deedle"&gt;Deedle&lt;/a&gt;. Although Deedle is written in F#, 
I also wrote some internal integration code in C#. After doing that, I realized that the 
code I wrote is actually reusable and should be a part of Deedle itself and so I went through
the process of rewriting a simple function from (fairly functional) C# to F#. This is a small
(and by no means representative!) example, but I think it nicely shows some of the reasons why
I like F#, so I thought I'd share it.&lt;/p&gt;

&lt;p&gt;One thing that we are adding to Deedle is a "BigDeedle" implementation of internal data 
structures. The idea is that you can load very big frames and series without actually loading
all data into memory.&lt;/p&gt;

&lt;p&gt;When you perform slicing on a large series and then merge some of the parts of the series
(say, years 2010, 2012 and 2014), you end up with a series that combines a
couple of chunks. If you then restrict the series (say, from June 2012 to June 2014), you
need to restrict the ranges of the chunks:&lt;/p&gt;

&lt;img src="http://tomasp.net/blog/2015/restricting-ranges/drawing.png" alt="Demonstration" style="margin:15px; width:370px" /&gt;

&lt;p&gt;As the diagram shows, this is just a matter of iterating over the chunks, keeping those 
in the range, dropping those outside of the range and restrictingthe boundaries of the other
chunks. So, let's start with the C# version I wrote.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Writing custom F# LINQ query builder</title>
      <guid>http://tomasp.net/blog/2015/query-translation</guid>
      <link>http://tomasp.net/blog/2015/query-translation/index.html</link>
      <pubDate>Tue, 07 Apr 2015 12:41:29 GMT</pubDate>
      <description>&lt;p&gt;One of the attendees of my &lt;a href="http://www.fsharpworks.com/workshops/finance.html"&gt;virtual F# in Finance course&lt;/a&gt;,
&lt;a href="https://twitter.com/stuart_j_davies"&gt;Stuart&lt;/a&gt; recently asked me a pretty advanced question about writing custom queries with F#, because he was 
interested in writing a nicer querying library for Amazon DynamoDB (his &lt;a href="https://github.com/stuartjdavies/FSharp.Cloud.AWS/blob/master/FSharp.Cloud.AWS/DynamoDB.fs"&gt;project is here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I realized that I don't really know about any good resource about doing this, so I wrote a little sample
that shows how you can do this. The idea is that we want to be able to write something like this:&lt;/p&gt;

&lt;table class="pre"&gt;&lt;tr&gt;&lt;td class="lines"&gt;&lt;pre class="fssnip"&gt;
&lt;span class="l"&gt;1: &lt;/span&gt;
&lt;span class="l"&gt;2: &lt;/span&gt;
&lt;span class="l"&gt;3: &lt;/span&gt;
&lt;span class="l"&gt;4: &lt;/span&gt;
&lt;span class="l"&gt;5: &lt;/span&gt;
&lt;/pre&gt;
&lt;/td&gt;
&lt;td class="snippet"&gt;&lt;pre class="fssnip"&gt;
&lt;span onmouseout="hideTip(event, 'abs177_1', 1)" onmouseover="showTip(event, 'abs177_1', 1)" class="i"&gt;query&lt;/span&gt; { 
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs177_2', 2)" onmouseover="showTip(event, 'abs177_2', 2)" class="i"&gt;p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span onmouseout="hideTip(event, 'abs177_3', 3)" onmouseover="showTip(event, 'abs177_3', 3)" class="i"&gt;DynamoDB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span onmouseout="hideTip(event, 'abs177_4', 4)" onmouseover="showTip(event, 'abs177_4', 4)" class="i"&gt;People&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span onmouseout="hideTip(event, 'abs177_5', 5)" onmouseover="showTip(event, 'abs177_5', 5)" class="k"&gt;where&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs177_2', 6)" onmouseover="showTip(event, 'abs177_2', 6)" class="i"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span onmouseout="hideTip(event, 'abs177_6', 7)" onmouseover="showTip(event, 'abs177_6', 7)" class="i"&gt;Age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;10&lt;/span&gt;)
  &lt;span onmouseout="hideTip(event, 'abs177_5', 8)" onmouseover="showTip(event, 'abs177_5', 8)" class="k"&gt;where&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs177_2', 9)" onmouseover="showTip(event, 'abs177_2', 9)" class="i"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span onmouseout="hideTip(event, 'abs177_7', 10)" onmouseover="showTip(event, 'abs177_7', 10)" class="i"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Tomas&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;)
  &lt;span onmouseout="hideTip(event, 'abs177_8', 11)" onmouseover="showTip(event, 'abs177_8', 11)" class="k"&gt;select&lt;/span&gt; (&lt;span onmouseout="hideTip(event, 'abs177_2', 12)" onmouseover="showTip(event, 'abs177_2', 12)" class="i"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span onmouseout="hideTip(event, 'abs177_6', 13)" onmouseover="showTip(event, 'abs177_6', 13)" class="i"&gt;Age&lt;/span&gt;, &lt;span onmouseout="hideTip(event, 'abs177_2', 14)" onmouseover="showTip(event, 'abs177_2', 14)" class="i"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span onmouseout="hideTip(event, 'abs177_7', 15)" onmouseover="showTip(event, 'abs177_7', 15)" class="i"&gt;Name&lt;/span&gt;) }&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;DynamoDB&lt;/code&gt; could even be a type generated by a type provider (with all the tables available in Dynamo DB).
Now, the above example uses the built-in &lt;code&gt;query&lt;/code&gt; builder, which is extensible, but, as far as I know, you have to 
use LINQ expression trees to support it. In this article, I'm going to use an alternative approach with custom
builder (so you would write &lt;code&gt;dynamo { ... }&lt;/code&gt; instead of &lt;code&gt;query { ... }&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I wanted to write a minimal example showing how to do this, so this blog post is going to be mostly code 
(unlike my other chatty articles!), but it should give you (and Stuart :-)) some idea how to do this. 
I was quite intrigued by the idea of having a nice query language for DynamoDB, so I'm hoping that this
blog post can help move the project forward!&lt;/p&gt;

&lt;div class="tip" id="abs177_1"&gt;val query : Linq.QueryBuilder&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.query&lt;/div&gt;
&lt;div class="tip" id="abs177_2"&gt;val p : People&lt;/div&gt;
&lt;div class="tip" id="abs177_3"&gt;type DynamoDB =&lt;br /&gt;&amp;#160;&amp;#160;static member People : seq&amp;lt;People&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Query-translation_.DynamoDB&lt;/div&gt;
&lt;div class="tip" id="abs177_4"&gt;property DynamoDB.People: seq&amp;lt;People&amp;gt;&lt;/div&gt;
&lt;div class="tip" id="abs177_5"&gt;custom operation: where (bool)&lt;br /&gt;&lt;br /&gt;Calls Linq.QueryBuilder.Where &lt;/div&gt;
&lt;div class="tip" id="abs177_6"&gt;People.Age: int&lt;/div&gt;
&lt;div class="tip" id="abs177_7"&gt;People.Name: string&lt;/div&gt;
&lt;div class="tip" id="abs177_8"&gt;custom operation: select (&amp;#39;Result)&lt;br /&gt;&lt;br /&gt;Calls Linq.QueryBuilder.Select &lt;/div&gt;
</description>
    </item>
    <item>
      <title>Pattern matching in action using C# 6</title>
      <guid>http://tomasp.net/blog/2015/csharp-pattern-matching</guid>
      <link>http://tomasp.net/blog/2015/csharp-pattern-matching/index.html</link>
      <pubDate>Wed, 01 Apr 2015 10:41:49 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/csharp-pattern-matching/hat.png" style="float:right;margin:20px" /&gt;

&lt;p&gt;On year ago, on this very day, &lt;a href="http://tomasp.net/blog/2014/csharp-6-released/index.html"&gt;I wrote about the open-sourcing of C# 
6.0&lt;/a&gt;. Thanks to a very special
information leak, I learned about this about a week before Microsoft officially announced
it. However, my information were slightly incorrect - rather then releasing the &lt;a href="https://github.com/Microsoft/visualfsharp/"&gt;much 
improved version of the language&lt;/a&gt;, Microsoft
continued working on language version internally called "Small C#", which is now available
as "C# 6" in the &lt;a href="https://www.visualstudio.com/en-us/news/vs2015-vs.aspx"&gt;Visual Studio 2015 preview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is my understanding that, with this release, Microsoft is secretly testing the reaction of the 
developer audience to some of the amazing features that F# developers loved and used for 
the last 7 years and that are coming to C# &lt;em&gt;very soon&lt;/em&gt;. To avoid shock, these are however
carefuly hidden!&lt;/p&gt;

&lt;p&gt;In this blog post, I'm going to show you &lt;em&gt;pattern matching&lt;/em&gt; which is probably the most useful
hidden C# feature and its improvements in C# 6. For reasons that elude me, pattern matching in 
C# 6 is called &lt;em&gt;exception filters&lt;/em&gt; and has some unfortunate restrictions. But we can still 
use it to write nice functional code!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Upcoming F# book and event deals</title>
      <guid>http://tomasp.net/blog/2015/books-trainings</guid>
      <link>http://tomasp.net/blog/2015/books-trainings/index.html</link>
      <pubDate>Fri, 27 Mar 2015 11:16:27 GMT</pubDate>
      <description>&lt;a href="http://www.functional-programming.net"&gt;
&lt;img src="http://tomasp.net/blog/2015/books-trainings/snip.png" style="width:150px;float:right;margin:0px 0px 15px 15px" /&gt;
&lt;/a&gt;

&lt;p&gt;Since I &lt;a href="https://twitter.com/tomaspetricek/status/544531884030840832"&gt;submitted my PhD thesis in December&lt;/a&gt;,
I had a little bit of time to finish some of the things that I wanted to do for a really long time, but
never quite found time to actually do them. This included &lt;a href="http://bluemountaincapital.github.io/FSharpRProvider/mac-and-linux.html"&gt;getting the R provider to work on 
Mac&lt;/a&gt; and also creating a new 
web site for my various functional programming trainings and books. I even have a nice domain name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://www.functional-programming.net"&gt;www.functional-programming.net&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The page also discusses a couple of business reasons for looking into functional programming. So, if you're
a business person wondering why you should send your developers on an F# course, the site has the answers
for you too! (Or if you are developer and need a page for your boss.) The other place to check out is the
official &lt;a href="http://www.fsharp.org"&gt;F# Software Foundation web page&lt;/a&gt; is another great resource and the
&lt;a href="http://fsharp.org/testimonials/"&gt;testimonials hosted there&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The page has some information about the &lt;a href="http://functional-programming.net/#trainings"&gt;various trainings we're offering at fsharpWorks&lt;/a&gt;
and about the two F# books I co-authored (&lt;a href="http://functional-programming.net/rwfp/"&gt;Real-World Functional Programming&lt;/a&gt; and 
brand new &lt;a href="http://functional-programming.net/deepdives/"&gt;F# Deep Dives&lt;/a&gt;). 
I'm happy that we can offer some special deals on both the books and the F# FastTrack course in London, 
so if you're considering getting into F#, now is a good time!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Library patterns: Why frameworks are evil</title>
      <guid>http://tomasp.net/blog/2015/library-frameworks</guid>
      <link>http://tomasp.net/blog/2015/library-frameworks/index.html</link>
      <pubDate>Tue, 03 Mar 2015 16:13:48 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/library-frameworks/diagram-narrow.png" style="float:right;margin:25px 0px 25px 20px" /&gt;

&lt;p&gt;This article is a follow up to my previous blog post about &lt;a href="http://tomasp.net/blog/2015/library-layers"&gt;functional library 
design&lt;/a&gt;, but you do not need to read the previous one,
because I'll focus on a different topic.&lt;/p&gt;

&lt;p&gt;In the previous article, I wrote about a couple of principles that I find useful when 
designing libraries in a functional style. This follows from my experience with building
F# libraries, but the ideas are quite general and can be useful in any programming language.
Previously, I wrote how &lt;em&gt;multiple layers of abstraction&lt;/em&gt; let you build libraries that make
80% of scenarios easy while still supporting the more interesting use cases.&lt;/p&gt;

&lt;p&gt;In this article, I'll focus on two other points from the list - how to design &lt;em&gt;composable&lt;/em&gt;
libraries and how (and why) to &lt;em&gt;avoid callbacks&lt;/em&gt; in library design. As the title suggests, this
boils down to one thing - build &lt;strong&gt;libraries&lt;/strong&gt; rather than &lt;strong&gt;frameworks&lt;/strong&gt;!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Library patterns: Multiple levels of abstraction</title>
      <guid>http://tomasp.net/blog/2015/library-layers</guid>
      <link>http://tomasp.net/blog/2015/library-layers/index.html</link>
      <pubDate>Tue, 03 Feb 2015 15:54:30 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/library-layers/layers.png" style="float:right;margin:15px 0px 15px 10px" /&gt;

&lt;p&gt;Over the last few years, I created or contributed to a number of libraries including 
&lt;a href="https://github.com/fsharp/FSharp.Data"&gt;F# Data&lt;/a&gt; for data access,
&lt;a href="http://bluemountaincapital.github.io/Deedle/"&gt;Deedle&lt;/a&gt; for exploratory data science with C# and F#,
Markdown parser and code-formatter &lt;a href="http://tpetricek.github.io/FSharp.Formatting/"&gt;F# Formatting&lt;/a&gt;
and other fun libraries such as one for composing 3D objects &lt;a href="http://tomasp.net/blog/2014/composing-christmas/"&gt;used in my Christmas blog 
post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Building libraries is a fun and challenging task - even if we ignore all the additional things
that you need to get right such as testing, documentation and building (see &lt;a href="http://tomasp.net/blog/2013/great-open-source/"&gt;my earlier blog
post&lt;/a&gt;) and focus just on the API design.
In this blog post (or perhaps a series), I'll share some of the things I learned when trying 
to answer the question: What should a good library look like?&lt;/p&gt;

&lt;p&gt;I was recently watching Mark Seemann's course &lt;a href="http://blog.ploeh.dk/2014/01/22/a-functional-architecture-with-f/"&gt;A Functional architecture with F#&lt;/a&gt;,
which is a great material on designing functional &lt;em&gt;applications&lt;/em&gt;. But I also realised that not much
has been written on designing functional &lt;em&gt;libraries&lt;/em&gt;. For some aspect, you can use functional patterns
like monads (see &lt;a href="https://skillsmatter.com/skillscasts/6120-functional-programming-design-patterns-with-scott-wlaschin"&gt;Scott Wlaschin's presentation&lt;/a&gt;),
but this only answers a part of the question - it tells you how to design individual types, but
not an entire library...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>FnuPlot: Cross-platform charting with gnuplot</title>
      <guid>http://tomasp.net/blog/2015/fnuplot</guid>
      <link>http://tomasp.net/blog/2015/fnuplot/index.html</link>
      <pubDate>Thu, 15 Jan 2015 16:58:17 GMT</pubDate>
      <description>&lt;img src="http://fsprojects.github.io/FnuPlot/img/logo.png" style="width:120px;float:right;margin:10px" /&gt;

&lt;p&gt;There is a bunch of visualization and charting libraries for F#. Sadly, perhaps the most
advanced one, &lt;a href="http://fsharp.github.io/FSharp.Charting/"&gt;F# Charting&lt;/a&gt;, does not work 
particularly well outside of Windows at the moment. There are also some work-in-progress
libraries based on HTML like &lt;a href="http://fsprojects.github.io/Foogle.Charts/"&gt;Foogle Charts&lt;/a&gt; and
&lt;a href="http://tahahachana.github.io/FsPlot/"&gt;FsPlot&lt;/a&gt;, which are cross-platform, but not quite
ready yet.&lt;/p&gt;

&lt;p&gt;Before Christmas, I got a &lt;a href="https://github.com/fsprojects/FnuPlot/pull/2"&gt;notification from GitHub&lt;/a&gt;
about a pull request for a simple gnuplot wrapper that I wrote a long time ago (and which used
to be carefully hidden &lt;a href="http://fsxplat.codeplex.com"&gt;on CodePlex&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The library is incomplete and I don't expect to dedicate too much time to maintaining it,
but it works quite nicely for basic charts and so I though I'd add the 
&lt;a href="http://fsprojects.github.io/ProjectScaffold/"&gt;ProjectScaffold&lt;/a&gt; structure, do a few tweaks
and make it available as a modern F# project.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why you should learn F# in 2015 (and how)?</title>
      <guid>http://tomasp.net/blog/2015/why-fsharp-in-2015</guid>
      <link>http://tomasp.net/blog/2015/why-fsharp-in-2015/index.html</link>
      <pubDate>Wed, 07 Jan 2015 13:36:04 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2015/why-fsharp-in-2015/gingerbread.jpg" style="width:200px;float:right;margin:15px" /&gt;

&lt;p&gt;I guess that it might be a bit too late for adding to your list of new year's resolution now.
But just if you still have an empty slot (or in case an originally taken slot has become
available), your new year's resolution should be to get involved with F#!&lt;/p&gt;

&lt;p&gt;Obviously, the goal of this blog post is to sell you some of my F# trainings and other materials -
including the online course on &lt;a href="http://fsharpworks.com/workshops/finance.html"&gt;F# in Finance&lt;/a&gt; and our
&lt;a href="http://fsharpworks.com/workshops/fast-track.html"&gt;FastTrack to F#&lt;/a&gt; course in London and New York
and also the &lt;a href="http://manning.com/petricek2"&gt;F# Deep Dives&lt;/a&gt; book. But to conceal this fact, I'm
going to fill most of the blog post with useful information about F#, the F# Software Foundation
and the F# community (but if you really just want to read about my courses, scroll down to the
&lt;a href="http://tomasp.net/blog/2015/why-fsharp-in-2015/index.html#courses"&gt;second section&lt;/a&gt;).&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Composing Christmas with F#</title>
      <guid>http://tomasp.net/blog/2014/composing-christmas</guid>
      <link>http://tomasp.net/blog/2014/composing-christmas/index.html</link>
      <pubDate>Mon, 08 Dec 2014 17:22:28 GMT</pubDate>
      <description>&lt;img src="http://tomasp.net/blog/2014/composing-christmas/glowing.gif" style="float:right;margin:20px; width:200px" /&gt; 

&lt;p&gt;This blog post is a part of the awesome &lt;a href="https://sergeytihon.wordpress.com/2014/11/24/f-advent-calendar-in-english-2014/"&gt;F# Advent Calendar&lt;/a&gt;
(see the previous entry about &lt;a href="http://richardminerich.com/2014/12/developing-an-algorithm-in-f-fast-rotational-alignments-with-gospers-hack/"&gt;writing algorithms in F#&lt;/a&gt;
from Rick Minerich), so it inevitably needs a Christmassy theme. However, there is also 
going to be a serious theme for the blog post, which is domain-specific languages.&lt;/p&gt;

&lt;p&gt;One of my favorite examples of Domain-Specific Languages is a simple OpenGL library
that I wrote some time ago for composing 3D graphics in F#. You can see it in my 
NDC 2014 talk &lt;a href="http://vimeo.com/97315970"&gt;Domain Specific Languages, the functional way&lt;/a&gt;
and I also used it for &lt;a href="http://tomasp.net/blog/2014/puzzling-fsharp/index.html"&gt;Solving Puzzles with F#&lt;/a&gt;
earlier on this blog.&lt;/p&gt;

&lt;p&gt;The nice thing about the library is that it is very simple, but is rich enough to demonstrate
all the important concepts. In fact, the library is so easy to use that &lt;a href="https://twitter.com/ptrelford/status/538098139430137856"&gt;even 8 years old can
do a talk about it&lt;/a&gt;. So, if you're
spending Christmas with your family, perhaps you can go through this article with your children!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>New features and improvements in Deedle v1.0</title>
      <guid>http://tomasp.net/blog/2014/deedle-v1</guid>
      <link>http://tomasp.net/blog/2014/deedle-v1/index.html</link>
      <pubDate>Tue, 27 May 2014 14:41:01 GMT</pubDate>
      <description>&lt;p&gt;As Howard Mansell already &lt;a href="http://techblog.bluemountaincapital.com/2014/05/21/deedle-v1-0-release/"&gt;announced on the BlueMountain Tech blog&lt;/a&gt;,
we have officially released the "1.0" version of Deedle. In case you have not 
heard of Deedle yet, it is a .NET library for interactive data analysis and 
exploration. Deedle works great with both C# and F#. It provides two main data
structures: &lt;em&gt;series&lt;/em&gt; for working with data and time series and &lt;em&gt;frame&lt;/em&gt; for working
with collections of series (think CSV files, data tables etc.)&lt;/p&gt;

&lt;p&gt;The great thing about Deedle is that it has been becoming a foundational library
that makes it possible to integrate a wide range of diverse data-science components.
For example, the &lt;a href="http://bluemountaincapital.github.io/FSharpRProvider/"&gt;R type provider&lt;/a&gt;
works well with Deedle and so does &lt;a href="http://fsharp.github.io/FSharp.Charting/"&gt;F# Charting&lt;/a&gt;.
We've been also working on integrating all of these into a single package called 
&lt;a href="https://github.com/tpetricek/FsLab"&gt;FsLab&lt;/a&gt;, but more about that next time!&lt;/p&gt;

&lt;p&gt;In this blog post, I'll have a quick look at a couple of new features in Deedle 
(and corresponding R type provider release). Howard's announcement has a 
&lt;a href="http://techblog.bluemountaincapital.com/2014/05/21/deedle-v1-0-release/"&gt;more detailed list&lt;/a&gt;, 
but I just want to give a couple of examples and briefly comment on performance
improvements we did.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>