(*** hide ***)
type People = { Name : string; Age : int }
type DynamoDB = 
  static member People : seq<People> = []
(**
One of the attendees of my [virtual F# in Finance course](http://www.fsharpworks.com/workshops/finance.html),
[Stuart](https://twitter.com/stuart_j_davies) recently asked me a pretty advanced question about writing custom queries with F#, because he was 
interested in writing a nicer querying library for Amazon DynamoDB (his [project is here](https://github.com/stuartjdavies/FSharp.Cloud.AWS/blob/master/FSharp.Cloud.AWS/DynamoDB.fs)).

I realized that I don't really know about any good resource about doing this, so I wrote a little sample
that shows how you can do this. The idea is that we want to be able to write something like this:
*)
query { 
  for p in DynamoDB.People do
  where (p.Age > 10)
  where (p.Name = "Tomas")
  select (p.Age, p.Name) }
(**
The `DynamoDB` could even be a type generated by a type provider (with all the tables available in Dynamo DB).
Now, the above example uses the built-in `query` builder, which is extensible, but, as far as I know, you have to 
use LINQ expression trees to support it. In this article, I'm going to use an alternative approach with custom
builder (so you would write `dynamo { ... }` instead of `query { ... }`).

I wanted to write a minimal example showing how to do this, so this blog post is going to be mostly code 
(unlike my other chatty articles!), but it should give you (and Stuart :-)) some idea how to do this. 
I was quite intrigued by the idea of having a nice query language for DynamoDB, so I'm hoping that this
blog post can help move the project forward! 
*)